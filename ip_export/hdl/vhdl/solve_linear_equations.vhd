-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity solve_linear_equations is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of solve_linear_equations is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "solve_linear_equations_solve_linear_equations,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=5138,HLS_SYN_LUT=7721,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv37_29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000101001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal X : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal A_local_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal A_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal B_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal X_read_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_read_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_376_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln35_reg_901 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln35_1_fu_380_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln35_1_reg_910 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln50_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_929 : STD_LOGIC_VECTOR (61 downto 0);
    signal gmem1_addr_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_reg_951 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln52_fu_477_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_reg_959 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln50_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln16_fu_523_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln16_reg_989 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem1_addr_read_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv35_load_reg_999 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln18_fu_569_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln18_reg_1010 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_local_addr_1_reg_1015 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln16_2_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln19_fu_585_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln19_reg_1020 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln19_fu_605_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln19_reg_1025 : STD_LOGIC_VECTOR (10 downto 0);
    signal B_local_addr_1_reg_1030 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln16_1_fu_620_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln16_1_reg_1035 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln18_fu_639_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln18_reg_1040 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln18_fu_658_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln18_reg_1045 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln26_fu_665_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln26_reg_1057 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln17_fu_706_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln17_reg_1065 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln16_4_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_local_addr_3_reg_1075 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln16_3_fu_722_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln16_3_reg_1080 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_local_load_1_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul25_i_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub28_i_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_5_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln26_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_764_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_797_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_reg_1116 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_local_addr_2_reg_1121 : STD_LOGIC_VECTOR (10 downto 0);
    signal B_local_addr_2_reg_1126 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln27_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1131 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_reg_1135 : STD_LOGIC_VECTOR (61 downto 0);
    signal empty_31_fu_832_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_31_reg_1141 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln27_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_local_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_local_ce0 : STD_LOGIC;
    signal A_local_we0 : STD_LOGIC;
    signal A_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_local_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal A_local_ce1 : STD_LOGIC;
    signal B_local_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_local_ce0 : STD_LOGIC;
    signal B_local_we0 : STD_LOGIC;
    signal B_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_local_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal X_local_ce0 : STD_LOGIC;
    signal X_local_we0 : STD_LOGIC;
    signal X_local_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_idle : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_ready : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_ce0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_we0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_idle : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_ready : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_we0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce1 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_ce : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_ce : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_idle : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_ready : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_ce0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_ce0 : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out_ap_vld : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_ce : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_ce : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_idle : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_ready : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WLAST : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_RREADY : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_BREADY : STD_LOGIC;
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_ce0 : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal i_1_reg_289 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg : STD_LOGIC := '0';
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_NS_fsm_state33 : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal zext_ln50_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln16_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_2_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal sext_ln50_1_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln50_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal zext_ln61_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_fu_150 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln50_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx59_fu_154 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln16_2_fu_728_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal indvars_iv35_fu_158 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_fu_162 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_4_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln54_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_339_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal trunc_ln35_fu_376_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_1_fu_380_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln50_fu_384_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln50_1_fu_400_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln50_1_fu_442_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_465_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_457_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln52_fu_473_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_489_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln16_fu_504_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln16_1_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln16_1_fu_560_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln16_fu_556_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_589_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_597_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln16_2_fu_616_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln16_3_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_4_fu_626_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln16_1_fu_632_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln18_fu_648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln18_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln16_4_fu_676_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln16_3_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_690_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_698_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln17_1_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln26_1_fu_760_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_781_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_789_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln28_fu_777_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln30_fu_803_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln27_cast_fu_814_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln27_1_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_ce : STD_LOGIC;
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_1156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1156_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1156_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_51_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln50 : IN STD_LOGIC_VECTOR (61 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (30 downto 0);
        add_ln52 : IN STD_LOGIC_VECTOR (10 downto 0);
        A_local_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        A_local_ce0 : OUT STD_LOGIC;
        A_local_we0 : OUT STD_LOGIC;
        A_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_18_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indvars_iv35 : IN STD_LOGIC_VECTOR (30 downto 0);
        zext_ln16_2 : IN STD_LOGIC_VECTOR (6 downto 0);
        add_ln19 : IN STD_LOGIC_VECTOR (10 downto 0);
        A_local_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        A_local_ce0 : OUT STD_LOGIC;
        A_local_we0 : OUT STD_LOGIC;
        A_local_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_local_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        A_local_ce1 : OUT STD_LOGIC;
        A_local_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        add_ln17 : IN STD_LOGIC_VECTOR (10 downto 0);
        temp : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_339_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_ce : OUT STD_LOGIC;
        grp_fu_1156_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_ce : OUT STD_LOGIC );
    end component;


    component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_27_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln27 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_local_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        add_ln28 : IN STD_LOGIC_VECTOR (10 downto 0);
        A_local_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        A_local_ce0 : OUT STD_LOGIC;
        A_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        select_ln27 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_local_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_local_ce0 : OUT STD_LOGIC;
        X_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sub5618_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sub5618_i_out_ap_vld : OUT STD_LOGIC;
        grp_fu_339_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_339_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_339_p_ce : OUT STD_LOGIC;
        grp_fu_1156_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1156_p_ce : OUT STD_LOGIC );
    end component;


    component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_61_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln61 : IN STD_LOGIC_VECTOR (61 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        X_local_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_local_ce0 : OUT STD_LOGIC;
        X_local_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_A_local_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_B_local_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component solve_linear_equations_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        n : OUT STD_LOGIC_VECTOR (31 downto 0);
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        X : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component solve_linear_equations_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component solve_linear_equations_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component solve_linear_equations_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    A_local_U : component solve_linear_equations_A_local_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_local_address0,
        ce0 => A_local_ce0,
        we0 => A_local_we0,
        d0 => A_local_d0,
        q0 => A_local_q0,
        address1 => A_local_address1,
        ce1 => A_local_ce1,
        q1 => A_local_q1);

    B_local_U : component solve_linear_equations_B_local_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_local_address0,
        ce0 => B_local_ce0,
        we0 => B_local_we0,
        d0 => B_local_d0,
        q0 => B_local_q0);

    X_local_U : component solve_linear_equations_B_local_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => X_local_address0,
        ce0 => X_local_ce0,
        we0 => X_local_we0,
        d0 => reg_361,
        q0 => X_local_q0);

    grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298 : component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_51_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start,
        ap_done => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done,
        ap_idle => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_idle,
        ap_ready => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_ready,
        m_axi_gmem0_AWVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        sext_ln50 => trunc_ln1_reg_929,
        trunc_ln => trunc_ln35_reg_901,
        add_ln52 => add_ln52_reg_959,
        A_local_address0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_address0,
        A_local_ce0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_ce0,
        A_local_we0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_we0,
        A_local_d0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_d0);

    grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308 : component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_18_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start,
        ap_done => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done,
        ap_idle => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_idle,
        ap_ready => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_ready,
        indvars_iv35 => indvars_iv35_load_reg_999,
        zext_ln16_2 => select_ln18_reg_1045,
        add_ln19 => add_ln19_reg_1025,
        A_local_address0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address0,
        A_local_ce0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce0,
        A_local_we0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_we0,
        A_local_d0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_d0,
        A_local_q0 => A_local_q0,
        A_local_address1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address1,
        A_local_ce1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce1,
        A_local_q1 => A_local_q1,
        add_ln17 => add_ln17_reg_1065,
        temp => reg_361,
        grp_fu_339_p_din0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din0,
        grp_fu_339_p_din1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din1,
        grp_fu_339_p_opcode => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_opcode,
        grp_fu_339_p_dout0 => grp_fu_339_p2,
        grp_fu_339_p_ce => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_ce,
        grp_fu_1156_p_din0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din0,
        grp_fu_1156_p_din1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din1,
        grp_fu_1156_p_dout0 => grp_fu_1156_p2,
        grp_fu_1156_p_ce => grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_ce);

    grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318 : component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_27_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start,
        ap_done => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done,
        ap_idle => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_idle,
        ap_ready => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_ready,
        sext_ln27 => i_4_fu_166,
        B_local_load_2 => reg_368,
        add_ln28 => add_ln28_reg_1116,
        A_local_address0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_address0,
        A_local_ce0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_ce0,
        A_local_q0 => A_local_q0,
        select_ln27 => select_ln27_reg_1146,
        X_local_address0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_address0,
        X_local_ce0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_ce0,
        X_local_q0 => X_local_q0,
        sub5618_i_out => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out,
        sub5618_i_out_ap_vld => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out_ap_vld,
        grp_fu_339_p_din0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din0,
        grp_fu_339_p_din1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din1,
        grp_fu_339_p_opcode => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_opcode,
        grp_fu_339_p_dout0 => grp_fu_339_p2,
        grp_fu_339_p_ce => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_ce,
        grp_fu_1156_p_din0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din0,
        grp_fu_1156_p_din1 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din1,
        grp_fu_1156_p_dout0 => grp_fu_1156_p2,
        grp_fu_1156_p_ce => grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_ce);

    grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330 : component solve_linear_equations_solve_linear_equations_Pipeline_VITIS_LOOP_61_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start,
        ap_done => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done,
        ap_idle => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_idle,
        ap_ready => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_ready,
        m_axi_gmem2_AWVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => gmem2_AWREADY,
        m_axi_gmem2_AWADDR => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => gmem2_WREADY,
        m_axi_gmem2_WDATA => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => ap_const_logic_0,
        m_axi_gmem2_ARADDR => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => ap_const_logic_0,
        m_axi_gmem2_RREADY => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => ap_const_lv32_0,
        m_axi_gmem2_RLAST => ap_const_logic_0,
        m_axi_gmem2_RID => ap_const_lv1_0,
        m_axi_gmem2_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem2_RUSER => ap_const_lv1_0,
        m_axi_gmem2_RRESP => ap_const_lv2_0,
        m_axi_gmem2_BVALID => gmem2_BVALID,
        m_axi_gmem2_BREADY => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        sext_ln61 => trunc_ln4_reg_1135,
        n => n_read_reg_882,
        X_local_address0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_address0,
        X_local_ce0 => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_ce0,
        X_local_q0 => X_local_q0);

    control_s_axi_U : component solve_linear_equations_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        n => n,
        A => A,
        B => B,
        X => X,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component solve_linear_equations_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARLEN => gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component solve_linear_equations_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => gmem1_addr_reg_935,
        I_ARLEN => n_read_reg_882,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RFIFONUM => gmem1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem2_m_axi_U : component solve_linear_equations_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RFIFONUM => gmem2_RFIFONUM,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => gmem2_AWADDR,
        I_AWLEN => gmem2_AWLEN,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WDATA,
        I_WSTRB => grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WSTRB,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY);

    fsub_32ns_32ns_32_5_full_dsp_1_U27 : component solve_linear_equations_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_339_p0,
        din1 => grp_fu_339_p1,
        ce => grp_fu_339_ce,
        dout => grp_fu_339_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U28 : component solve_linear_equations_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_361,
        din1 => reg_368,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U29 : component solve_linear_equations_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_347_p2);

    mul_32s_32s_32_2_1_U30 : component solve_linear_equations_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => n_read_reg_882,
        din1 => n_read_reg_882,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U31 : component solve_linear_equations_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1156_p0,
        din1 => grp_fu_1156_p1,
        ce => grp_fu_1156_ce,
        dout => grp_fu_1156_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state33) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_ready = ap_const_logic_1)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_ready = ap_const_logic_1)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_ready = ap_const_logic_1)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_ready = ap_const_logic_1)) then 
                    grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_2_fu_564_p2 = ap_const_lv1_0) and (icmp_ln16_reg_964 = ap_const_lv1_1) and (icmp_ln50_reg_917 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_1_reg_289 <= k_fu_162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_1_reg_289 <= add_ln16_3_reg_1080;
            end if; 
        end if;
    end process;

    i_4_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln50_reg_917 = ap_const_lv1_0) or ((icmp_ln16_2_fu_564_p2 = ap_const_lv1_1) or (icmp_ln16_reg_964 = ap_const_lv1_0))))) then 
                i_4_fu_166 <= n_read_reg_882;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_4_fu_166 <= i_5_reg_1103;
            end if; 
        end if;
    end process;

    i_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_150 <= ap_const_lv6_0;
            elsif (((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_fu_150 <= add_ln50_fu_451_p2;
            end if; 
        end if;
    end process;

    idx59_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_498_p2 = ap_const_lv1_1) and (icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                idx59_fu_154 <= ap_const_lv37_0;
            elsif (((icmp_ln16_4_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                idx59_fu_154 <= add_ln16_2_fu_728_p2;
            end if; 
        end if;
    end process;

    indvars_iv35_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_498_p2 = ap_const_lv1_1) and (icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvars_iv35_fu_158 <= ap_const_lv31_0;
            elsif (((icmp_ln16_4_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                indvars_iv35_fu_158 <= add_ln18_reg_1010;
            end if; 
        end if;
    end process;

    k_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_498_p2 = ap_const_lv1_1) and (icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_fu_162 <= ap_const_lv31_1;
            elsif (((icmp_ln16_4_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                k_fu_162 <= add_ln16_1_reg_1035;
            end if; 
        end if;
    end process;

    reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_354 <= A_local_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_354 <= A_local_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_2_fu_564_p2 = ap_const_lv1_0) and (icmp_ln16_reg_964 = ap_const_lv1_1) and (icmp_ln50_reg_917 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                A_local_addr_1_reg_1015 <= zext_ln16_fu_575_p1(11 - 1 downto 0);
                B_local_addr_1_reg_1030 <= zext_ln16_1_fu_580_p1(6 - 1 downto 0);
                add_ln16_1_reg_1035 <= add_ln16_1_fu_620_p2;
                    add_ln19_reg_1025(10 downto 3) <= add_ln19_fu_605_p2(10 downto 3);
                select_ln18_reg_1045 <= select_ln18_fu_658_p3;
                trunc_ln19_reg_1020 <= trunc_ln19_fu_585_p1;
                    zext_ln18_reg_1040(6 downto 0) <= zext_ln18_fu_639_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_764_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                A_local_addr_2_reg_1121 <= zext_ln30_fu_809_p1(11 - 1 downto 0);
                B_local_addr_2_reg_1126 <= zext_ln26_fu_772_p1(6 - 1 downto 0);
                    add_ln28_reg_1116(10 downto 3) <= add_ln28_fu_797_p2(10 downto 3);
                icmp_ln27_reg_1131 <= icmp_ln27_fu_818_p2;
                    zext_ln26_reg_1111(31 downto 0) <= zext_ln26_fu_772_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                A_local_load_1_reg_1085 <= A_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_4_fu_680_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                B_local_addr_3_reg_1075 <= zext_ln16_2_fu_685_p1(6 - 1 downto 0);
                add_ln16_3_reg_1080 <= add_ln16_3_fu_722_p2;
                    add_ln17_reg_1065(10 downto 3) <= add_ln17_fu_706_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                X_read_reg_877 <= X;
                icmp_ln50_reg_917 <= icmp_ln50_fu_384_p2;
                n_read_reg_882 <= n;
                trunc_ln35_1_reg_910 <= trunc_ln35_1_fu_380_p1;
                trunc_ln35_reg_901 <= trunc_ln35_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_964 = ap_const_lv1_1) and (icmp_ln50_reg_917 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                add_ln18_reg_1010 <= add_ln18_fu_569_p2;
                indvars_iv35_load_reg_999 <= indvars_iv35_fu_158;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    add_ln52_reg_959(10 downto 3) <= add_ln52_fu_477_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_764_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                empty_31_reg_1141 <= empty_31_fu_832_p3;
                trunc_ln4_reg_1135 <= X_read_reg_877(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem1_addr_read_reg_994 <= gmem1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem1_addr_reg_935 <= sext_ln50_1_fu_410_p1;
                trunc_ln1_reg_929 <= A(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_3_reg_951 <= i_fu_150;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_5_reg_1103 <= i_5_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln16_reg_964 <= icmp_ln16_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul25_i_reg_1090 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln50_reg_941 <= grp_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_361 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state48))) then
                reg_368 <= B_local_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                select_ln27_reg_1146 <= select_ln27_fu_847_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_498_p2 = ap_const_lv1_1) and (icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                sext_ln16_reg_989 <= sext_ln16_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln50_reg_917 = ap_const_lv1_0) or ((icmp_ln16_2_fu_564_p2 = ap_const_lv1_1) or (icmp_ln16_reg_964 = ap_const_lv1_0))))) then
                sext_ln26_reg_1057 <= sext_ln26_fu_665_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                sub28_i_reg_1095 <= grp_fu_339_p2;
            end if;
        end if;
    end process;
    add_ln52_reg_959(2 downto 0) <= "000";
    add_ln19_reg_1025(2 downto 0) <= "000";
    zext_ln18_reg_1040(30 downto 7) <= "000000000000000000000000";
    add_ln17_reg_1065(2 downto 0) <= "000";
    zext_ln26_reg_1111(63 downto 32) <= "00000000000000000000000000000000";
    add_ln28_reg_1116(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state66, ap_CS_fsm_state73, icmp_ln50_fu_384_p2, icmp_ln50_reg_917, ap_CS_fsm_state11, icmp_ln50_1_fu_446_p2, icmp_ln16_reg_964, ap_CS_fsm_state14, icmp_ln16_2_fu_564_p2, ap_CS_fsm_state15, icmp_ln16_4_fu_680_p2, ap_CS_fsm_state43, tmp_9_fu_764_p3, icmp_ln27_fu_818_p2, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done, gmem1_RVALID, gmem2_AWREADY, gmem2_BVALID, ap_CS_fsm_state34, ap_CS_fsm_state45, ap_CS_fsm_state68, ap_block_state4_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln50_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln50_1_fu_446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((gmem1_RVALID = ap_const_logic_0) or (grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln50_reg_917 = ap_const_lv1_0) or ((icmp_ln16_2_fu_564_p2 = ap_const_lv1_1) or (icmp_ln16_reg_964 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln16_4_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln27_fu_818_p2 = ap_const_lv1_0) and (tmp_9_fu_764_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                elsif (((icmp_ln27_fu_818_p2 = ap_const_lv1_1) and (tmp_9_fu_764_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state66 => 
                if (((gmem2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_local_address0_assign_proc : process(ap_CS_fsm_state12, A_local_addr_1_reg_1015, ap_CS_fsm_state15, A_local_addr_2_reg_1121, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_address0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_address0, ap_CS_fsm_state34, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            A_local_address0 <= A_local_addr_2_reg_1121;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            A_local_address0 <= A_local_addr_1_reg_1015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            A_local_address0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_address0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_local_address0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_address0;
        else 
            A_local_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    A_local_address1_assign_proc : process(ap_CS_fsm_state15, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address1, ap_CS_fsm_state34, zext_ln17_fu_717_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            A_local_address1 <= zext_ln17_fu_717_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_address1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_address1;
        else 
            A_local_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    A_local_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_ce0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_ce0, ap_CS_fsm_state34, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            A_local_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            A_local_ce0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_A_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_ce0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_local_ce0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_ce0;
        else 
            A_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_local_ce1_assign_proc : process(ap_CS_fsm_state15, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            A_local_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_ce1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_ce1;
        else 
            A_local_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_local_d0_assign_proc : process(ap_CS_fsm_state12, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_d0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_d0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_d0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_local_d0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_d0;
        else 
            A_local_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_local_we0_assign_proc : process(ap_CS_fsm_state12, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_we0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            A_local_we0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_A_local_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_local_we0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_A_local_we0;
        else 
            A_local_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_local_address0_assign_proc : process(B_local_addr_1_reg_1030, B_local_addr_3_reg_1075, ap_CS_fsm_state43, zext_ln26_fu_772_p1, B_local_addr_2_reg_1126, ap_CS_fsm_state42, zext_ln50_fu_542_p1, ap_CS_fsm_state13, ap_CS_fsm_state46, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            B_local_address0 <= B_local_addr_2_reg_1126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            B_local_address0 <= zext_ln26_fu_772_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            B_local_address0 <= B_local_addr_3_reg_1075;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            B_local_address0 <= B_local_addr_1_reg_1030;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_local_address0 <= zext_ln50_fu_542_p1(6 - 1 downto 0);
        else 
            B_local_address0 <= "XXXXXX";
        end if; 
    end process;


    B_local_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state42, ap_CS_fsm_state13, ap_CS_fsm_state46, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            B_local_ce0 <= ap_const_logic_1;
        else 
            B_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_local_d0_assign_proc : process(sub28_i_reg_1095, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out, ap_CS_fsm_state42, ap_CS_fsm_state13, ap_CS_fsm_state46, bitcast_ln54_fu_546_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            B_local_d0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_sub5618_i_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            B_local_d0 <= sub28_i_reg_1095;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_local_d0 <= bitcast_ln54_fu_546_p1;
        else 
            B_local_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_local_we0_assign_proc : process(icmp_ln27_reg_1131, ap_CS_fsm_state42, ap_CS_fsm_state13, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state42) or ((icmp_ln27_reg_1131 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then 
            B_local_we0 <= ap_const_logic_1;
        else 
            B_local_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_local_address0_assign_proc : process(zext_ln26_reg_1111, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_address0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_address0, ap_CS_fsm_state45, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_local_address0 <= zext_ln26_reg_1111(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            X_local_address0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            X_local_address0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_address0;
        else 
            X_local_address0 <= "XXXXXX";
        end if; 
    end process;


    X_local_ce0_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_ce0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_ce0, ap_CS_fsm_state45, ap_CS_fsm_state68, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_local_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            X_local_ce0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_X_local_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            X_local_ce0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_X_local_ce0;
        else 
            X_local_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_local_we0_assign_proc : process(ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_local_we0 <= ap_const_logic_1;
        else 
            X_local_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_1_fu_620_p2 <= std_logic_vector(unsigned(k_fu_162) + unsigned(ap_const_lv31_1));
    add_ln16_2_fu_728_p2 <= std_logic_vector(unsigned(idx59_fu_154) + unsigned(ap_const_lv37_29));
    add_ln16_3_fu_722_p2 <= std_logic_vector(unsigned(i_1_reg_289) + unsigned(ap_const_lv31_1));
    add_ln16_4_fu_626_p2 <= std_logic_vector(unsigned(trunc_ln16_2_fu_616_p1) + unsigned(ap_const_lv7_1));
    add_ln16_fu_504_p2 <= std_logic_vector(unsigned(trunc_ln35_1_reg_910) + unsigned(ap_const_lv7_7F));
    add_ln17_1_fu_712_p2 <= std_logic_vector(unsigned(add_ln17_fu_706_p2) + unsigned(trunc_ln19_reg_1020));
    add_ln17_fu_706_p2 <= std_logic_vector(unsigned(tmp_4_fu_690_p3) + unsigned(tmp_5_fu_698_p3));
    add_ln18_1_fu_652_p2 <= std_logic_vector(unsigned(trunc_ln18_fu_648_p1) + unsigned(ap_const_lv7_1));
    add_ln18_fu_569_p2 <= std_logic_vector(unsigned(indvars_iv35_fu_158) + unsigned(ap_const_lv31_1));
    add_ln19_fu_605_p2 <= std_logic_vector(unsigned(tmp_2_fu_589_p3) + unsigned(tmp_3_fu_597_p3));
    add_ln27_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_166),33));
    add_ln27_fu_842_p2 <= std_logic_vector(unsigned(i_4_fu_166) + unsigned(ap_const_lv32_1));
    add_ln28_fu_797_p2 <= std_logic_vector(unsigned(tmp_6_fu_781_p3) + unsigned(tmp_7_fu_789_p3));
    add_ln30_fu_803_p2 <= std_logic_vector(unsigned(add_ln28_fu_797_p2) + unsigned(trunc_ln28_fu_777_p1));
    add_ln50_fu_451_p2 <= std_logic_vector(unsigned(i_fu_150) + unsigned(ap_const_lv6_1));
    add_ln52_fu_477_p2 <= std_logic_vector(unsigned(tmp_fu_457_p3) + unsigned(zext_ln52_fu_473_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_NS_fsm_state33 <= ap_NS_fsm(32);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done, gmem1_RVALID)
    begin
        if (((gmem1_RVALID = ap_const_logic_0) or (grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done)
    begin
        if ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done)
    begin
        if ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_io)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;

    ap_ST_fsm_state66_blk_assign_proc : process(gmem2_AWREADY)
    begin
        if ((gmem2_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state66_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state66_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state67_blk <= ap_const_logic_0;

    ap_ST_fsm_state68_blk_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done)
    begin
        if ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(gmem2_BVALID)
    begin
        if ((gmem2_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state4_io_assign_proc : process(gmem0_ARREADY, gmem1_ARREADY)
    begin
                ap_block_state4_io <= ((gmem1_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state73, gmem2_BVALID)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state73, gmem2_BVALID)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln54_fu_546_p1 <= gmem1_addr_read_reg_994;
    empty_31_fu_832_p3 <= 
        trunc_ln35_reg_901 when (icmp_ln50_reg_917(0) = '1') else 
        ap_const_lv31_0;

    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11, icmp_ln50_1_fu_446_p2, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARADDR, sext_ln50_fu_429_p1, ap_block_state4_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
            gmem0_ARADDR <= sext_ln50_fu_429_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            gmem0_ARADDR <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, mul_ln50_reg_941, ap_CS_fsm_state11, icmp_ln50_1_fu_446_p2, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLEN, ap_block_state4_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
            gmem0_ARLEN <= mul_ln50_reg_941;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            gmem0_ARLEN <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11, icmp_ln50_1_fu_446_p2, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARVALID, ap_block_state4_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            gmem0_ARVALID <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, icmp_ln50_1_fu_446_p2, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln50_1_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            gmem0_RREADY <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_io))) then 
            gmem1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(ap_CS_fsm_state12, grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done, gmem1_RVALID)
    begin
        if ((not(((gmem1_RVALID = ap_const_logic_0) or (grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem1_RREADY <= ap_const_logic_1;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AR_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(m_axi_gmem1_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_AWADDR_assign_proc : process(ap_CS_fsm_state66, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWADDR, gmem2_AWREADY, ap_CS_fsm_state67, ap_CS_fsm_state68, sext_ln61_fu_863_p1)
    begin
        if (((gmem2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem2_AWADDR <= sext_ln61_fu_863_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem2_AWADDR <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWADDR;
        else 
            gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWLEN_assign_proc : process(ap_CS_fsm_state66, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLEN, gmem2_AWREADY, ap_CS_fsm_state67, ap_CS_fsm_state68, zext_ln61_fu_873_p1)
    begin
        if (((gmem2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem2_AWLEN <= zext_ln61_fu_873_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem2_AWLEN <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWLEN;
        else 
            gmem2_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_CS_fsm_state66, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWVALID, gmem2_AWREADY, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((gmem2_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem2_AWVALID <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_AWVALID;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_CS_fsm_state73, grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_BREADY, gmem2_BVALID, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem2_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem2_BREADY <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_BREADY;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WVALID, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem2_WVALID <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_m_axi_gmem2_WVALID;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1156_ce_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_ce, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_ce, ap_CS_fsm_state34, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1156_ce <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1156_ce <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_ce;
        else 
            grp_fu_1156_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1156_p0_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din0, ap_CS_fsm_state34, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1156_p0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1156_p0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din0;
        else 
            grp_fu_1156_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1156_p1_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din1, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din1, ap_CS_fsm_state34, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_1156_p1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_1156_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_1156_p1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_1156_p_din1;
        else 
            grp_fu_1156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_339_ce_assign_proc : process(grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_ce, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_ce, ap_CS_fsm_state34, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_339_ce <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_339_ce <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_ce;
        else 
            grp_fu_339_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_339_p0_assign_proc : process(reg_368, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din0, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din0, ap_CS_fsm_state34, ap_CS_fsm_state45, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_339_p0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_339_p0 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_339_p0 <= reg_368;
        else 
            grp_fu_339_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_339_p1_assign_proc : process(mul25_i_reg_1090, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din1, grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din1, ap_CS_fsm_state34, ap_CS_fsm_state45, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_339_p1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_grp_fu_339_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_339_p1 <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_grp_fu_339_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_339_p1 <= mul25_i_reg_1090;
        else 
            grp_fu_339_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_343_ce_assign_proc : process(ap_CS_fsm_state36, grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_347_p0_assign_proc : process(reg_354, reg_368, ap_CS_fsm_state17, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_347_p0 <= reg_368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_347_p0 <= reg_354;
        else 
            grp_fu_347_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_p1_assign_proc : process(reg_354, A_local_load_1_reg_1085, ap_CS_fsm_state17, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_347_p1 <= reg_354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_347_p1 <= A_local_load_1_reg_1085;
        else 
            grp_fu_347_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_18_3_fu_308_ap_start_reg;
    grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_27_5_fu_318_ap_start_reg;
    grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_51_2_fu_298_ap_start_reg;
    grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start <= grp_solve_linear_equations_Pipeline_VITIS_LOOP_61_3_fu_330_ap_start_reg;
    i_5_fu_750_p2 <= std_logic_vector(unsigned(i_4_fu_166) + unsigned(ap_const_lv32_FFFFFFFF));
    icmp_ln16_1_fu_509_p2 <= "0" when (add_ln16_fu_504_p2 = ap_const_lv7_0) else "1";
    icmp_ln16_2_fu_564_p2 <= "1" when (indvars_iv35_fu_158 = sext_ln16_reg_989) else "0";
    icmp_ln16_3_fu_611_p2 <= "0" when (k_fu_162 = trunc_ln35_reg_901) else "1";
    icmp_ln16_4_fu_680_p2 <= "1" when (i_1_reg_289 = zext_ln18_reg_1040) else "0";
    icmp_ln16_fu_498_p2 <= "1" when (signed(tmp_8_fu_489_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln18_fu_643_p2 <= "0" when (indvars_iv35_fu_158 = trunc_ln35_reg_901) else "1";
    icmp_ln27_1_fu_838_p2 <= "0" when (i_4_fu_166 = n_read_reg_882) else "1";
    icmp_ln27_fu_818_p2 <= "1" when (signed(add_ln27_cast_fu_814_p1) < signed(sext_ln26_reg_1057)) else "0";
    icmp_ln50_1_fu_446_p2 <= "1" when (zext_ln50_1_fu_442_p1 = trunc_ln35_reg_901) else "0";
    icmp_ln50_fu_384_p0 <= n;
    icmp_ln50_fu_384_p2 <= "1" when (signed(icmp_ln50_fu_384_p0) > signed(ap_const_lv32_0)) else "0";
    select_ln16_1_fu_632_p3 <= 
        trunc_ln35_1_reg_910 when (icmp_ln16_3_fu_611_p2(0) = '1') else 
        add_ln16_4_fu_626_p2;
    select_ln16_fu_515_p3 <= 
        add_ln16_fu_504_p2 when (icmp_ln16_1_fu_509_p2(0) = '1') else 
        ap_const_lv7_1;
    select_ln18_fu_658_p3 <= 
        trunc_ln35_1_reg_910 when (icmp_ln18_fu_643_p2(0) = '1') else 
        add_ln18_1_fu_652_p2;
    select_ln27_fu_847_p3 <= 
        n_read_reg_882 when (icmp_ln27_1_fu_838_p2(0) = '1') else 
        add_ln27_fu_842_p2;
        sext_ln16_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln16_fu_515_p3),31));

        sext_ln26_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_read_reg_882),33));

        sext_ln50_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln50_1_fu_400_p4),64));

        sext_ln50_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_929),64));

        sext_ln61_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1135),64));

    tmp_1_fu_465_p3 <= (i_fu_150 & ap_const_lv3_0);
    tmp_2_fu_589_p3 <= (trunc_ln16_1_fu_560_p1 & ap_const_lv5_0);
    tmp_3_fu_597_p3 <= (trunc_ln16_fu_556_p1 & ap_const_lv3_0);
    tmp_4_fu_690_p3 <= (trunc_ln16_4_fu_676_p1 & ap_const_lv5_0);
    tmp_5_fu_698_p3 <= (trunc_ln16_3_fu_672_p1 & ap_const_lv3_0);
    tmp_6_fu_781_p3 <= (trunc_ln26_1_fu_760_p1 & ap_const_lv5_0);
    tmp_7_fu_789_p3 <= (trunc_ln26_fu_756_p1 & ap_const_lv3_0);
    tmp_8_fu_489_p4 <= n_read_reg_882(31 downto 1);
    tmp_9_fu_764_p3 <= i_5_fu_750_p2(31 downto 31);
    tmp_fu_457_p3 <= (i_fu_150 & ap_const_lv5_0);
    trunc_ln16_1_fu_560_p1 <= indvars_iv35_fu_158(6 - 1 downto 0);
    trunc_ln16_2_fu_616_p1 <= k_fu_162(7 - 1 downto 0);
    trunc_ln16_3_fu_672_p1 <= i_1_reg_289(8 - 1 downto 0);
    trunc_ln16_4_fu_676_p1 <= i_1_reg_289(6 - 1 downto 0);
    trunc_ln16_fu_556_p1 <= indvars_iv35_fu_158(8 - 1 downto 0);
    trunc_ln18_fu_648_p1 <= indvars_iv35_fu_158(7 - 1 downto 0);
    trunc_ln19_fu_585_p1 <= indvars_iv35_fu_158(11 - 1 downto 0);
    trunc_ln26_1_fu_760_p1 <= i_5_fu_750_p2(6 - 1 downto 0);
    trunc_ln26_fu_756_p1 <= i_5_fu_750_p2(8 - 1 downto 0);
    trunc_ln28_fu_777_p1 <= i_5_fu_750_p2(11 - 1 downto 0);
    trunc_ln35_1_fu_380_p0 <= n;
    trunc_ln35_1_fu_380_p1 <= trunc_ln35_1_fu_380_p0(7 - 1 downto 0);
    trunc_ln35_fu_376_p0 <= n;
    trunc_ln35_fu_376_p1 <= trunc_ln35_fu_376_p0(31 - 1 downto 0);
    trunc_ln50_1_fu_400_p4 <= B(63 downto 2);
    zext_ln16_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv35_fu_158),64));
    zext_ln16_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_289),64));
    zext_ln16_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx59_fu_154),64));
    zext_ln17_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_712_p2),64));
    zext_ln18_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_fu_632_p3),31));
    zext_ln26_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_fu_750_p2),64));
    zext_ln30_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_803_p2),64));
    zext_ln50_1_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_150),31));
    zext_ln50_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_951),64));
    zext_ln52_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_465_p3),11));
    zext_ln61_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_31_reg_1141),32));
end behav;
